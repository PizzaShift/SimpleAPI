dotnet new webapi -n SimpleAPI
cd SimpleAPI
dotnet build 
dotnet new xunit -n SimpleAPI.Test


test and make sure the api runs 
cd src\simpleapi
dotnet run 


cd to test project and and build it after changes 

dotnet test


#let's check this to github
git --vesion 
git init 
git status
git add . 
git commit -m "Initial commit"

git push -u origin master
git remote add origin https://github.com/eric-cabrera/SimpleAPI.git

#when i try to push again it will failed becuase the azure-pipelines.yml
#file was created by devops, so now i need to merage the changes by using pull

git pull

# the push back the chnages 
git push origin master 


#i added this section to the yml file so we can the run our unit tests
steps:
  - task: DotNetCoreCLI@2
    imputs:
      command: test
      projects: "**/*Test/*.csproj"
      arguments: "--configuration $(buildConfiguration)"
 

git status
git add . 
git commit -m "updated yml file to run the tests3"
git status
git push origin master

#this should triger the build and execute the test back in our pipeline cd 

https://github.com/binarythistle/SimpleAPI


after my last check in 
a new pipeline will be created with a build number and  the abobe commit description 
  eric-cabrera.SimpleAPI    #20200713.1 updated yml file to run the tests3

if i drill into the pipeline , i will have a job in the summary tab 
inside the job , i will see the above task DotNetCoreCLI added to the job 

if i go at the end of the task ,i will have the below link to a dash board 
https://tfsprodeus2su5.visualstudio.com/A2e9d569e-4e82-44ff-a128-6f1444692912/Simple%20API/_TestManagement/Runs?runId=1000006&_a=runCharts



if i click the test tab i will see the result of the above test
2 Run(s) Completed ( 1 Passed, 0 Failed )

let's break the unit test, so we can see the result  

https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/build-artifacts?view=azure-devops&tabs=yaml
lets do the package part of the pipeline for the build

we add the below 2 comands 

#
- task: DotNetCoreCLI@2
  displayName: 'dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
  inputs:
    command: publish
    publishWebProjects: false
    projects: 'src/SimpleAPI/SimpleAPI.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: true

# the Artifact
- task: PublishBuildArtifacts@1
  displayName: 'publish artifacts'


not let's move to the release pipeline
we take the above artifact from the build and push it to asure 

the artifact is what we push to azure
the deployment stage contain subscription app service name and so o

first , create a resource in Azure an API App resorce 
https://simpleapi.azurewebsites.net/
NOW LET'S USE THIS RESOURCE FOR OUR RELEASE PIPELINE 

testing 


